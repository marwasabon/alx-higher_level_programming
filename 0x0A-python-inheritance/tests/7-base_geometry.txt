This txt file contains the testing code for the `integer_validator` method from the 
BaseGeometry class that is in the 7-base_geometry` module.

=====================================================================================

:: Import BaseGeometry class and create an instance.

	>>> BaseGeometry = __import__('7-base_geometry').BaseGeometry
	>>> bg = BaseGeometry()


======================================================================================

:: Test for normal behaviour with good string and valid integer.

	>>> bg.integer_validator("good", 1000)
	>>> bg.integer_validator("good", 750)


========================================================================================

:: Test for empty string

	>>> bg.integer_validator("", 100.0)
	Traceback (innermost last):
	TypeError:  must be an integer


=============================================================================================

:: Test for type errors such as float, string and list

:: Test for float.
	>>> bg.integer_validator("float", 780.2)
	Traceback (innermost last):
	TypeError: float must be an integer


:: Test for string.
	>>> bg.integer_validator("string", "780")
	Traceback (innermost last):
	TypeError: string must be an integer


:: Test for list.
	>>> bg.integer_validator("list", [780.2])
	Traceback (innermost last):
	TypeError: list must be an integer

:: Test for negative float.
	>>> bg.integer_validator("negative float", -780.2)
	Traceback (innermost last):
	TypeError: negative float must be an integer

:: Test for infinity.
	>>> bg.integer_validator("infinity", float('inf'))
	Traceback (innermost last):
	TypeError: infinity must be an integer

:: Test for NaN.
	>>> bg.integer_validator("nan", float('nan'))
	Traceback (innermost last):
	TypeError: nan must be an integer

:: Test for tuple datatype
	>>> bg.integer_validator("tuple", (4,))
	Traceback (innermost last):
	TypeError: tuple must be an integer

:: Test for bool.
	>>> bg.integer_validator("bool", True)
	Traceback (innermost last):
	TypeError: bool must be an integer

:: Test for set.
	>>> bg.integer_validator("set", {8, 7, 6})
	Traceback (innermost last):
	TypeError: set must be an integer

:: Test for NaN.
	>>> bg.integer_validator("none", None)
	Traceback (innermost last):
	TypeError: none must be an integer


===============================================================================================

:: Test for ValueError, if integer is less than 0

	>>> bg.integer_validator("good", -1)
	Traceback (innermost last):
	ValueError: good must be greater than 0
	
	>>> bg.integer_validator("good", 0)
	Traceback (innermost last):
	ValueError: good must be greater than 0

==============================================================================================

:: Test for area method

	>>> bg.area()
	Traceback (innermost last):
	Exception: area() is not implemented


===============================================================================================

:: Test for integer_validator missing a parameter or parameters

	>>> bg.integer_validator() #doctest: +IGNORE_EXCEPTION_DETAIL
	Traceback (innermost last):
	TypeError: ...
	
	>>> bg.integer_validator("age") #doctest: +IGNORE_EXCEPTION_DETAIL
	Traceback (innermost last):
	TypeError: ...
